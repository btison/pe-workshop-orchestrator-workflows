apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  annotations:
    sonataflow.org/description: Creating an OpenShift Namespace
    sonataflow.org/expressionLang: jq
    sonataflow.org/profile: gitops
    sonataflow.org/version: "1.0"
  creationTimestamp: null
  labels:
    app: create-ocp-namespace-swt
    sonataflow.org/workflow-app: create-ocp-namespace-swt
  name: create-ocp-namespace-swt
spec:
  flow:
    dataInputSchema:
      failOnValidationErrors: true
      schema: schemas/create-ocp-namespace-swt-schema.json
    functions:
      - name: createTicket
        operation: specs/ticket-manager-openapi.yaml#createTicket
        type: rest
      - name: getTicket
        operation: specs/ticket-manager-openapi.yaml#getTicketById
        type: rest
      - name: closeTicket
        operation: specs/ticket-manager-openapi.yaml#transitionTicket
        type: rest
      - name: createNotification
        operation: specs/notifications-openapi.yaml#createNotification
        type: rest
      - name: launchSoftwareTemplate
        operation: specs/scaffolder-openapi.yaml#createTask
        type: rest
      - name: getSoftwareTemplateTask
        operation: specs/scaffolder-openapi.yaml#getTaskDetails
        type: rest
      - name: logInfo
        operation: sysout:INFO
        type: custom
      - name: templateSuccessResult
        operation: '{ "result": { "outputs":[ { "key":"Component in Catalog", "value": $SECRET.rhdh_url + "/catalog/default/component/" + .component.repoName, "format":"link" }] } }'
        type: expression
      - name: templateErrorResult
        operation: '{ "result": { "completedWith":"error", "message": "Launching software template " + $SECRET.software_template_ref + " failed.", "outputs":[] } }'
        type: expression
      - name: successResult
        operation: '{ "result": { "message": "Namespace " + .namespace + " active", "outputs":[] } }'
        type: expression
      - name: errorNamespaceNotActiveResult
        operation: '{ "result": { "message": "Namespace " + .namespace + " not active" } }'
        type: expression
      - name: errorDeniedResult
        operation: '{ "result": { "message": "Creation of namespace " + .namespace + " denied", "outputs":[ { "key":"Ticket", "value": $SECRET.ticket_manager_url + "/rest/api/v1/ticket/" + .createTicketResult.id, "format":"link" }] } }'
        type: expression
    start:
      stateName: OpenTicket
    states:
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .createTicketResult
              useResults: true
            functionRef:
              arguments:
                labels:
                  - rhdh-workflow
                  - '"workflowId=" + $WORKFLOW.instanceId'
                project: rhdh-operations
                summary: '"Request authorization to create namespace " + .namespace'
                type: Task
              invoke: sync
              refName: createTicket
            name: Create Ticket
        name: OpenTicket
        transition:
          nextState: SendNotificationTicketCreated
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: Ticket created
                  link: $SECRET.ticket_manager_url + "/rest/api/v1/ticket/" + .createTicketResult.id
                  severity: normal
                  title: Ticket created
                  topic: Create OCP Namespace workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: 'Create notification: ticket created'
        name: SendNotificationTicketCreated
        transition:
          nextState: PollTicket
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .getTicketResult
              useResults: true
            functionRef:
              arguments:
                ticketId: .createTicketResult.id
              invoke: sync
              refName: getTicket
            name: get ticket
            sleep:
              before: PT60S
        name: PollTicket
        transition:
          nextState: CheckTicketStatus
        type: operation
      - dataConditions:
          - condition: .getTicketResult.status == "Denied"
            name: Resource request denied
            transition:
              nextState: CloseTicketDenied
          - condition: .getTicketResult.status == "Approved"
            name: Resource request authorized
            transition:
              nextState: LaunchSoftwareTemplate
        defaultCondition:
          transition:
            nextState: PollTicket
        name: CheckTicketStatus
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .launchedTemplate
              useResults: true
            functionRef:
              arguments:
                templateRef: $SECRET.software_template_ref
                values:
                  component_id: .namespace
                  namespace_owner: .requester
              invoke: sync
              refName: launchSoftwareTemplate
            name: Launch Software Template
        name: LaunchSoftwareTemplate
        transition:
          nextState: GetSoftwareTemplate
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                message: '"Sleeping before checking the software template "'
              invoke: sync
              refName: logInfo
            sleep:
              after: PT15S
          - actionDataFilter:
              toStateData: .readTask
              useResults: true
            functionRef:
              arguments:
                taskId: .launchedTemplate.id
              invoke: sync
              refName: getSoftwareTemplateTask
        name: GetSoftwareTemplate
        transition:
          nextState: IsTaskDone
        type: operation
      - dataConditions:
          - condition: (.readTask.status == "processing")
            transition:
              nextState: GetSoftwareTemplate
          - condition: (.readTask.status == "completed")
            transition:
              nextState: SendTaskCompletedNotification
          - condition: (.readTask.status == "failed")
            transition:
              nextState: SendTaskFailureNotification
        defaultCondition:
          transition:
            nextState: GetSoftwareTemplate
        name: IsTaskDone
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: templateSuccessResult
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"Namespace " + .namespace + " created"'
                  link: $SECRET.rhdh_url + "/catalog/default/component/" + .namespace
                  severity: normal
                  title: '"Namespace " + .namespace + " created"'
                  topic: Create OCP Namespace workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
        name: SendTaskCompletedNotification
        transition:
          nextState: CloseTicket
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: templateErrorResult
            name: templateErrorResult
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"Namespace " + .namespace + " could not be created"'
                  severity: high
                  title: '"Namespace " + ..namespace + " could not be created"'
                  topic: Create OCP Namespace workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
        name: SendTaskFailureNotification
        transition:
          nextState: CloseTicket
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .closeTicketResult
              useResults: true
            functionRef:
              arguments:
                status: Closed
                ticketId: .createTicketResult.id
              invoke: sync
              refName: closeTicket
            name: Close ticket
        end:
          terminate: true
        name: CloseTicket
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: errorDeniedResult
            name: setOutput
          - actionDataFilter:
              toStateData: .closeTicketResult
              useResults: true
            functionRef:
              arguments:
                status: Closed
                ticketId: .createTicketResult.id
              invoke: sync
              refName: closeTicket
            name: Close ticket
        end:
          terminate: true
        metadata:
          errorMessage: '"Creation of namespace " + .namespace + " denied"'
        name: CloseTicketDenied
        type: operation
  podTemplate:
    container:
      resources: {}
      image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
      envFrom:
        - secretRef:
            name: create-ocp-namespace-swt-creds
        - secretRef:
            name: {{ .Values.secret.notification }}
  resources:
    configMaps:
      - configMap:
          name: 01-create-ocp-namespace-swt-resources-schemas
        workflowPath: schemas
      - configMap:
          name: 02-create-ocp-namespace-swt-resources-specs
        workflowPath: specs
  persistence:
    postgresql:
      {{- toYaml .Values.persistence.postgresql | nindent 6 }}
