apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  annotations:
    sonataflow.org/description: Creating an OpenShift Namespace
    sonataflow.org/expressionLang: jq
    sonataflow.org/profile: gitops
    sonataflow.org/version: "1.0"
  creationTimestamp: null
  labels:
    app: create-ocp-namespace
    sonataflow.org/workflow-app: create-ocp-namespace
  name: create-ocp-namespace
spec:
  flow:
    dataInputSchema:
      failOnValidationErrors: true
      schema: schemas/create-ocp-namespace-schema.json
    functions:
      - name: createTicket
        operation: specs/ticket-manager-openapi.yaml#createTicket
        type: rest
      - name: getTicket
        operation: specs/ticket-manager-openapi.yaml#getTicketById
        type: rest
      - name: closeTicket
        operation: specs/ticket-manager-openapi.yaml#transitionTicket
        type: rest
      - name: createCoreV1Namespace
        operation: specs/ocp-namespace-openapi.yaml#createCoreV1Namespace
        type: rest
      - name: readCoreV1Namespace
        operation: specs/ocp-namespace-openapi.yaml#readCoreV1Namespace
        type: rest
      - name: createRbacAuthorizationV1NamespacedRoleBinding
        operation: specs/ocp-rolebinding-openapi.yaml#createRbacAuthorizationV1NamespacedRoleBinding
        type: rest
      - name: createNotification
        operation: notifications#createNotification
        type: rest
      - name: sysoutFunction
        operation: sysout
        type: custom
      - name: successResult
        operation: '{ "result": { "message": "Namespace " + .namespace + " active", "outputs":[] } }'
        type: expression
      - name: errorNamespaceNotActiveResult
        operation: '{ "result": { "message": "Namespace " + .namespace + " not active" } }'
        type: expression
      - name: errorDeniedResult
        operation: '{ "result": { "message": "Creation of namespace " + .namespace + " denied", "outputs":[ { "key":"Ticket", "value": $SECRET.ticket_manager_url + "/rest/api/v1/ticket/" + .createTicketResult.id, "format":"link" }] } }'
        type: expression
    start:
      stateName: Open Ticket for Operations
    states:
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .createTicketResult
              useResults: true
            functionRef:
              arguments:
                labels:
                  - rhdh-workflow
                  - '"workflowId=" + $WORKFLOW.instanceId'
                project: rhdh-operations
                summary: '"Request authorization to create namespace " + .namespace'
                type: Task
              invoke: sync
              refName: createTicket
            name: Create Ticket
        name: Open Ticket for Operations
        transition:
          nextState: 'Create Notification: Ticket Created'
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: Ticket created
                  link: $SECRET.ticket_manager_url + "/rest/api/v1/ticket/" + .createTicketResult.id
                  severity: normal
                  title: Ticket created
                  topic: Create OCP Namespace workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: 'Create notification: ticket created'
        name: 'Create Notification: Ticket Created'
        transition:
          nextState: Poll Ticket
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .getTicketResult
              useResults: true
            functionRef:
              arguments:
                ticketId: .createTicketResult.id
              invoke: sync
              refName: getTicket
            name: get issue
            sleep:
              before: PT60S
        name: Poll Ticket
        transition:
          nextState: Check Ticket Status
        type: operation
      - dataConditions:
          - condition: .getTicketResult.status == "Denied"
            name: Resource request denied
            transition:
              nextState: Close ticket - Namespace Creation Denied
          - condition: .getTicketResult.status == "Approved"
            name: Resource request authorized
            transition:
              nextState: Create Namespace
        defaultCondition:
          transition:
            nextState: Poll Ticket
        name: Check Ticket Status
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                kind: Namespace
                metadata:
                  labels:
                    kubernetes.io/metadata.name: .namespace
                  name: .namespace
                spec:
                  finalizers:
                    - kubernetes
              invoke: sync
              refName: createCoreV1Namespace
            name: Create OCP Namespace
        name: Create Namespace
        transition:
          nextState: 'Post operation: get namespace resource'
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .namespaceObject
              useResults: true
            functionRef:
              arguments:
                name: .namespace
              invoke: sync
              refName: readCoreV1Namespace
            name: Get created namespace
            sleep:
              before: PT10S
        name: 'Post operation: get namespace resource'
        transition:
          nextState: Close ticket
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .closeTicketResult
              useResults: true
            functionRef:
              arguments:
                status: Closed
                ticketId: .createTicketResult.id
              invoke: sync
              refName: closeTicket
            name: Close ticket
        name: Close ticket
        transition:
          nextState: 'Post operation: check namespace resource created successfully'
        type: operation
      - dataConditions:
          - condition: .namespaceObject.status.phase == "Active"
            name: Namespace Active
            transition:
              nextState: Create rolebinding for namespace requester
        defaultCondition:
          transition:
            nextState: Notify namespace not active
        name: 'Post operation: check namespace resource created successfully'
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: .openshiftUser + "-edit"
                  namespace: .namespace
                namespace: .namespace
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: edit
                subjects:
                  - apiGroup: rbac.authorization.k8s.io
                    kind: User
                    name: .openshiftUser
              invoke: sync
              refName: createRbacAuthorizationV1NamespacedRoleBinding
            name: Create rolebinding
        name: Create rolebinding for namespace requester
        transition:
          nextState: Notify namespace active
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"Namespace " + .namespace + " active"'
                  severity: normal
                  title: '"Namespace " + .namespace + " active"'
                  topic: Create OCP Namespace workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: 'Create notification: project active'
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: successResult
            name: setOutput
        end:
          terminate: true
        name: Notify namespace active
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                payload:
                  description: '"Namespace " + .namespace + " inactive"'
                  severity: high
                  title: '"Namespace " + ..namespace + " inactive"'
                  topic: Create OCP Namespace workflow
                recipients:
                  entityRef: .recipients
                  type: entity
              invoke: sync
              refName: createNotification
            name: 'Create notification: namespace not active'
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: errorNamespaceNotActiveResult
            name: setOutput
        end:
          terminate: true
        metadata:
          errorMessage: '"Namespace " + .namespace + " not active"'
        name: Notify namespace not active
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: errorDeniedResult
            name: setOutput
          - actionDataFilter:
              toStateData: .closeTicketResult
              useResults: true
            functionRef:
              arguments:
                status: Closed
                ticketId: .createTicketResult.id
              invoke: sync
              refName: closeTicket
            name: Close ticket
        end:
          terminate: true
        metadata:
          errorMessage: '"Creation of namespace " + .namespace + " denied"'
        name: Close ticket - Namespace Creation Denied
        type: operation
  podTemplate:
    container:
      resources: {}
      image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
      envFrom:
        - secretRef:
            name: create-ocp-namespace-creds
        - secretRef:
            name: {{ .Values.secret.openshiftToken }}
        - secretRef:
            name: {{ .Values.secret.notification }}
  resources:
    configMaps:
      - configMap:
          name: 01-create-ocp-namespace-resources-schemas
        workflowPath: schemas
      - configMap:
          name: 02-create-ocp-namespace-resources-specs
        workflowPath: specs
  persistence:
    postgresql:
      {{- toYaml .Values.persistence.postgresql | nindent 6 }}
